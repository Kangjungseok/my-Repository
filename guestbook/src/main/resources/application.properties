#우리가 사용할 Viewer 이름이 타임리프(Thymeleaf) 입니다. 이 놈의 cache 값을 false로
spring.thymeleaf.cache=false

server.port=80
spring.datasource.driver-class-name=org.mariadb.jdbc.Driver
spring.datasource.url=jdbc:mariadb://localhost:3306/gamedb
spring.datasource.username=jskang2
spring.datasource.password=1234


#ORM Application : JPA를 DB Entity 로 바인딩하는 중간계의 프로그램입니다.
#스프링부트에서는 기본적으로 Hibernate 를 사용하는데, 업체에 따라서
#MyBatis, IBatis 등을 사용합니다. 모두 같은 ORM Mapper 라고 생각하시면 됩니다.

#실행되는 DB 쿼리를 콘솔에 출력하도록 설정합니다.
spring.jpa.show-sql=true

# 프로젝트 실행 시에 자동으로 DDL 생성 여부를 결정하는 속성 설정합니다.
# create 는 매번 생성, update 는 변경이 필요 시 alter 로 처리, 테이블이 없는 경우에 create 되어집니다.
spring.jpa.hibernate.ddl-auto=update


# 실제 jpa 구현체인 하이버네이트가 동작하면서 발생하는 SQL을 콘솔에 출력하도록 설정
spring.jpa.properties.hibernate.format_fql=true
spring.jpa.properties.hibernate.show-sql=true
# 바인딩되는 파라미터값 출력하는 속성
logging.level.org.hibernate.type.descriptor.sql= trace;
spring.jpa.open-in-view=true

#웹요청의 모든 내용을 debug 모드로 콘솔에 출력
logging.level.web=debug;

logging.level.org.hibernate.SQL= DEBUG
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=trace

#Post 요청 시 요청 파라미터 보이기 속성 설정
spring.mvc.log-request-details=true

spring.jpa.properties.hibernate.highlight_sql=true
spring.jpa.properties.hibernate.use_sql_comments=true




